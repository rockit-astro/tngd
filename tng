#!/usr/bin/env python3.6
#
# This file is part of tngd.
#
# tngd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tngd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tngd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from tngd"""

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

def print_status():
    """Prints the latest environment data in human-readable form"""
    latest = None
    try:
        with daemons.tng_log.connect() as tng:
            latest = tng.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the TNG weather feed daemon')
        return 1

    if latest is not None:
        print('         Seeing: ' + format_measurement(latest, 'seeing', '"'))
        print('     Dust Conc.: ' + format_measurement(latest, 'dust', ' ug/m\u00B3', '.2f'))
        print('    Solarimeter: ' + format_measurement(latest, 'solarimeter', ' W/m\u00B2'))
        print()
    else:
        print('error: failed to query data')

    return 0

def format_measurement(data, sensor, units='', fmt='.1f'):
    """Generates a formatted string reporting the status of the given sensor"""
    if not data[sensor + '_valid']:
        return FMT_BOLD + FMT_RED + "NO DATA" + FMT_CLEAR

    if fmt != '':
        fmt = ':' + fmt

    date = datetime.datetime.strptime(data[sensor + '_date'], '%Y-%m-%dT%H:%M:%SZ')
    return FMT_BOLD + ('{0' + fmt +'}').format(data[sensor]) + FMT_CLEAR + units \
        + ' (at ' + FMT_BOLD + date.strftime('%H:%M:%S') + FMT_CLEAR + ')'

def print_json():
    """Prints the latest environment data in machine-readable form"""
    try:
        with daemons.tng_log.connect() as tng:
            latest = tng.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the TNG weather feed daemon')
        return 1

    print(json.dumps(latest))

    return 0

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the TNG weather feed')
    print('   json        print a machine-readable summary of the TNG weather feed')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

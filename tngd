#!/usr/bin/env python3.4
#
# This file is part of tngd.
#
# tngd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tngd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tngd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the TNG weather feed for the Warwick one-metre telescope"""

import datetime
import json
import urllib.request
import Pyro4
from warwick.observatory.common import daemons, log

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

TNG_FEED_URI = 'http://tngweb.tng.iac.es/api/meteo/weather'

# Sensor sections that don't require special handling
TNG_REGULAR_SENSORS = ['solarimeter', 'temperature', 'dewpoint', 'uv', 'humidity', 'pressure',
                       'winddir', 'windspeed', 'dust']

TNG_QUERY_TIMEOUT = 3

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=no-self-use

class TngWeatherDaemon:
    """Wraps a web request to the TNG weather feed"""
    def __init__(self):
        self._query_error = False

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        try:
            with urllib.request.urlopen(TNG_FEED_URI, timeout=TNG_QUERY_TIMEOUT) as response:
                data = json.loads(response.read().decode('utf-8'))

            seeing = -1
            try:
                if data['seeing']['median']:
                    seeing = float(data['seeing']['median'])
                else:
                    seeing = float(data['seeing']['value'])
            except Exception:
                pass

            ret = {
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION,
                'seeing': seeing,
                'seeing_date': data['seeing']['timestamp'] + 'Z',
                'seeing_valid': not bool(data['seeing']['outdated'])
            }

            for sensor in TNG_REGULAR_SENSORS:
                ret.update({
                    sensor: float(data[sensor]['value']),
                    sensor + '_date': data[sensor]['timestamp'] + 'Z',
                    sensor + '_valid': not bool(data[sensor]['outdated'])
                })

            if self._query_error:
                log.info('tngd', 'Restored contact with TNG weather API')
                self._query_error = False

            return ret
        except Exception as exception:
            print('{} ERROR: failed to query from TNG weather API: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))

            if not self._query_error:
                log.error('tngd', 'Lost contact with TNG weather API')
                self._query_error = True

            return None

if __name__ == '__main__':
    daemons.tng_log.launch(TngWeatherDaemon())

#!/usr/bin/env python3.6
#
# This file is part of tngd.
#
# tngd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tngd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tngd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the TNG weather feed for the Warwick La Palma telescopes"""

import datetime
import threading
import requests
import Pyro4
from warwick.observatory.common import daemons, log

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

TNG_FEED_URI = 'http://tngweb.tng.iac.es/api/meteo/weather'
TNG_QUERY_TIMEOUT = 5

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=no-self-use

class TngWeatherDaemon:
    """Wraps a web request to the TNG weather feed"""
    def __init__(self):
        self._query_error = False

        self._lock = threading.Lock()
        self._last_measurement_date = None
        self._last_measurement = None

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        now = datetime.datetime.utcnow()

        # Rate limit queries to once per minute
        if self._last_measurement_date and (now - self._last_measurement_date).total_seconds() < 60:
            with self._lock:
                return self._last_measurement

        try:
            data = requests.get(TNG_FEED_URI, timeout=TNG_QUERY_TIMEOUT, verify=False).json()

            ret = {
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
            }

            for sensor in ['seeing', 'solarimeter', 'dust']:
                try:
                    ret[sensor + '_date'] = data[sensor]['timestamp'] + 'Z'
                    ret[sensor] = float(data[sensor]['value'])
                    ret[sensor + '_valid'] = not bool(data[sensor]['outdated'])
                except Exception:
                    ret[sensor + '_date'] = data[sensor]['timestamp'] + 'Z'
                    ret[sensor] = -1
                    ret[sensor + '_valid'] = False

            if self._query_error:
                log.info('tngd', 'Restored contact with TNG weather API')
                self._query_error = False

            with self._lock:
                self._last_measurement = ret
                self._last_measurement_date = now

            return ret
        except Exception as exception:
            print('{} ERROR: failed to query from TNG weather API: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))

            if not self._query_error:
                log.error('tngd', 'Lost contact with TNG weather API')
                self._query_error = True

            return None

if __name__ == '__main__':
    daemons.tng_log.launch(TngWeatherDaemon())
